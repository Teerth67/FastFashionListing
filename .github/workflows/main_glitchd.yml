# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and deploy Node.js app to Azure Web App - Glitchd

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      - name: Install backend dependencies
        shell: pwsh
        run: |
          # Check if we have a backend directory (monorepo structure)
          if (Test-Path "backend") {
            Write-Host "Installing backend dependencies from backend/ directory..."
            Set-Location backend
            npm install
            Set-Location ..
          } else {
            Write-Host "Installing dependencies from root directory..."
            npm install
          }

      - name: Build frontend (if exists)
        shell: pwsh
        run: |
          if (Test-Path "frontend") {
            Write-Host "Frontend directory found, building frontend..."
            Set-Location frontend
            npm install
            
            # Update browserslist database to remove warnings
            try { npx update-browserslist-db@latest } catch { Write-Host "Could not update browserslist database" }
            
            # Build with CI=false to treat warnings as warnings, not errors
            $env:CI = "false"
            $env:GENERATE_SOURCEMAP = "false"
            npm run build
            Set-Location ..
          } else {
            Write-Host "No frontend directory found, skipping frontend build"
          }

      - name: Create deployment package
        shell: pwsh
        run: |
          Write-Host "Creating deployment package..."
          
          # List current directory structure for debugging
          Write-Host "Current directory contents:"
          Get-ChildItem
          
          # Check if we're in a monorepo structure
          if (Test-Path "backend") {
            Write-Host "Backend directory found, copying from backend/"
            
            # Create a clean directory structure
            New-Item -ItemType Directory -Path "deploy-package" -Force
            
            # Copy backend files from backend directory
            try { Copy-Item "backend/package.json" "deploy-package/" -ErrorAction SilentlyContinue } catch { Write-Host "No backend/package.json found" }
            try { Copy-Item "backend/server.js" "deploy-package/" -ErrorAction SilentlyContinue } catch { Write-Host "No backend/server.js found" }
            try { Copy-Item "backend/routes" "deploy-package/" -Recurse -ErrorAction SilentlyContinue } catch { Write-Host "No backend/routes directory" }
            try { Copy-Item "backend/middleware" "deploy-package/" -Recurse -ErrorAction SilentlyContinue } catch { Write-Host "No backend/middleware directory" }
            try { Copy-Item "backend/models" "deploy-package/" -Recurse -ErrorAction SilentlyContinue } catch { Write-Host "No backend/models directory" }
            try { Copy-Item "backend/config" "deploy-package/" -Recurse -ErrorAction SilentlyContinue } catch { Write-Host "No backend/config directory" }
            try { Copy-Item "backend/utils" "deploy-package/" -Recurse -ErrorAction SilentlyContinue } catch { Write-Host "No backend/utils directory" }
            
            # Try to copy web.config from backend first, then from root
            try {
              Copy-Item "backend/web.config" "deploy-package/" -ErrorAction SilentlyContinue
            } catch {
              try {
                Copy-Item "web.config" "deploy-package/" -ErrorAction SilentlyContinue
              } catch {
                Write-Host "No web.config file found"
              }
            }
            
          } else {
            Write-Host "No backend directory, assuming files are in root"
            
            # Create a clean directory structure
            New-Item -ItemType Directory -Path "deploy-package" -Force
            
            # Copy backend files from root
            try { Copy-Item "package.json" "deploy-package/" -ErrorAction SilentlyContinue } catch { Write-Host "No package.json found" }
            try { Copy-Item "server.js" "deploy-package/" -ErrorAction SilentlyContinue } catch { Write-Host "No server.js found" }
            try { Copy-Item "routes" "deploy-package/" -Recurse -ErrorAction SilentlyContinue } catch { Write-Host "No routes directory" }
            try { Copy-Item "middleware" "deploy-package/" -Recurse -ErrorAction SilentlyContinue } catch { Write-Host "No middleware directory" }
            try { Copy-Item "models" "deploy-package/" -Recurse -ErrorAction SilentlyContinue } catch { Write-Host "No models directory" }
            try { Copy-Item "config" "deploy-package/" -Recurse -ErrorAction SilentlyContinue } catch { Write-Host "No config directory" }
            try { Copy-Item "utils" "deploy-package/" -Recurse -ErrorAction SilentlyContinue } catch { Write-Host "No utils directory" }
            try { Copy-Item "web.config" "deploy-package/" -ErrorAction SilentlyContinue } catch { Write-Host "No web.config file" }
          }
          
          # Copy frontend build if it exists
          if (Test-Path "frontend/build") {
            Write-Host "Copying frontend build..."
            Copy-Item "frontend/build" "deploy-package/" -Recurse -Force
          } else {
            Write-Host "No frontend build directory found"
          }
          
          # Check what we have in deploy-package
          Write-Host "Deploy package contents:"
          Get-ChildItem "deploy-package"
          
          # Move deployment package contents to current directory
          if ((Test-Path "deploy-package") -and (Get-ChildItem "deploy-package" | Measure-Object).Count -gt 0) {
            Get-ChildItem "deploy-package" | Copy-Item -Destination "." -Recurse -Force
            Remove-Item "deploy-package" -Recurse -Force
            Write-Host "Deployment package created successfully"
          } else {
            Write-Host "Error: Deploy package is empty or doesn't exist"
            exit 1
          }

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: |
            .
            !node_modules
            !frontend
            !.git
            !.github

  deploy:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: node-app

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_1A93E2C1030A43A796BF1D7D5B233AFF }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_C89D6B7960BA4161997E914967A7211D }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_7D5E44CEF5FF48B7BDD694F13C8549C2 }}

      - name: 'Deploy to Azure Web App'
        uses: azure/webapps-deploy@v3
        id: deploy-to-webapp
        with:
          app-name: 'Glitchd'
          package: .